// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Guild {
  id          String @id
  name        String
  iconUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  forumChannels ForumChannel[]
  
  @@map("guilds")
}

model ForumChannel {
  id          String @id
  name        String
  description String?
  guildId     String
  position    Int?
  topic       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  guild       Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  posts       ForumPost[]
  
  @@map("forum_channels")
}

model ForumPost {
  id              String @id
  title           String
  content         String?
  authorId        String // Discord user ID
  userId          String // FK to User table
  channelId       String
  guildId         String
  messageCount    Int @default(1)
  isLocked        Boolean @default(false)
  isPinned        Boolean @default(false)
  tags            String? // JSON string for SQLite compatibility
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastMessageAt   DateTime @default(now())
  
  channel         ForumChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        ForumMessage[]
  
  @@map("forum_posts")
}

model ForumMessage {
  id            String @id
  content       String
  authorId      String // Discord user ID
  userId        String // FK to User table
  postId        String
  guildId       String
  editedAt      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  post          ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("forum_messages")
}

model User {
  id           String @id @default(uuid())
  discordId    String @unique
  username     String
  displayName  String?
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  forumPosts    ForumPost[]
  forumMessages ForumMessage[]
  scoreHistory  ScoreHistory[]
  
  @@map("users")
}

model ScoreHistory {
  id             String @id @default(uuid())
  userId         String
  score          Int
  postName       String?
  messageContent String?
  messageLink    String?
  scoredAt       DateTime
  createdAt      DateTime @default(now())
  
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("score_history")
}

model Task {
  id             String @id @default(uuid())
  taskName       String
  complexity     Int
  dueDate        DateTime
  url            String // Discord URL
  threadId       String // Discord thread ID
  channelId      String // Discord channel ID
  guildId        String // Discord guild ID
  status         String @default("pending") // pending, completed, cancelled
  completedAt    DateTime? // When task was completed
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("tasks")
}

model ForumConfig {
  id             String @id @default(uuid())
  key            String @unique
  value          String // Changed from Json to String for SQLite
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("forum_configs")
}

model SyncLog {
  id          Int @id @default(autoincrement())
  action      String  // 'post_created', 'message_created', 'post_updated', etc.
  discordId   String
  success     Boolean
  error       String?
  metadata    Json?
  createdAt   DateTime @default(now())
  
  @@map("sync_logs")
}